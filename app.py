import streamlit as st
import pandas as pd
import altair as alt

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", layout="wide", page_icon="üè´")

# CSS Styling
st.markdown("""
    <style>
    .title { font-size: 36px; font-weight: 800; color: #2c3e50; margin-bottom: 10px; }
    .subtitle { font-size: 20px; color: #7f8c8d; margin-bottom: 30px; }
    .stButton > button {
        background-color: #3498db; color: white; font-weight: bold; border-radius: 8px;
    }
    </style>
""", unsafe_allow_html=True)

# ‡∏†‡∏≤‡∏û‡πÇ‡∏•‡πÇ‡∏Å‡πâ
st.image("school.jpg", use_container_width=True)
st.markdown('<div class="title">‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</div>', unsafe_allow_html=True)

# Session state
if 'income_data' not in st.session_state:
    st.session_state.income_data = pd.DataFrame(columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"])
if 'expense_data' not in st.session_state:
    st.session_state.expense_data = pd.DataFrame(columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"])

income_categories = [
    "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô", "‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏Ñ‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
]

# ===== INPUT =====
col1, col2 = st.columns(2)

with col1:
    st.subheader("üí∞ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
    with st.form("income_form"):
        date_income = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô")
        category = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", income_categories)
        amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, format="%.2f")
        if st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"):
            if amount > 0:
                new_row = {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": date_income, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà": category, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": amount}
                st.session_state.income_data = pd.concat([st.session_state.income_data, pd.DataFrame([new_row])], ignore_index=True)
                st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö '{category}' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {amount:.2f} ‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

with col2:
    st.subheader("üí∏ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    with st.form("expense_form"):
        date_expense = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô")
        desc = st.text_input("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
        expense_amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, format="%.2f", key="expense_amount")
        if st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"):
            if desc and expense_amount > 0:
                new_row = {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": date_expense, "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î": desc, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": expense_amount}
                st.session_state.expense_data = pd.concat([st.session_state.expense_data, pd.DataFrame([new_row])], ignore_index=True)
                st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ '{desc}' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {expense_amount:.2f} ‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# ===== SUMMARY =====
st.markdown("---")
st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")

total_income = st.session_state.income_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()
total_expense = st.session_state.expense_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()
balance = total_income - total_expense

st.metric("‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
st.metric("‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", f"{total_expense:,.2f} ‡∏ö‡∏≤‡∏ó")
st.metric("‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{balance:,.2f} ‡∏ö‡∏≤‡∏ó")

with st.expander("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"):
    st.dataframe(st.session_state.income_data)

with st.expander("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"):
    st.dataframe(st.session_state.expense_data)

# ===== FILTER BY DATE =====
st.markdown("---")
st.subheader("üìÖ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")

income_df = st.session_state.income_data.copy()
income_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"
income_df.rename(columns={"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"}, inplace=True)

expense_df = st.session_state.expense_data.copy()
expense_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"

combined_df = pd.concat([income_df, expense_df], ignore_index=True)

if not combined_df.empty:
    min_date = combined_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].min()
    max_date = combined_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].max()
    start_date, end_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", [min_date, max_date])

    mask = (combined_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] >= pd.to_datetime(start_date)) & (combined_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] <= pd.to_datetime(end_date))
    filtered_df = combined_df.loc[mask].sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")

    st.write(f"üîç ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(filtered_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    st.dataframe(filtered_df[["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"]], use_container_width=True)

    st.markdown("### üóìÔ∏è Timeline ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‚Äì‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    chart = alt.Chart(filtered_df).mark_bar().encode(
        x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T',
        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:Q',
        color='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N',
        tooltip=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N', '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:N', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:Q']
    ).properties(height=300)

    st.altair_chart(chart, use_container_width=True)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á")
